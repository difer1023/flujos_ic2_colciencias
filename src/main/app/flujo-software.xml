<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.9.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd 
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd 
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd 
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd 
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd 
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
<flow name="flujo-software">
        <http:listener config-ref="HTTP_colciencias_Configuration" path="/flujoSoftware" doc:name="HTTP"/>
        <cxf:jaxws-service  doc:name="flujoSoftware"  service="softwareService" serviceClass="co.com.ic2.colciencias.ws.IServiceSoftware"/>
        <choice doc:name="Choice">
        	<when
				expression="message.getInvocationProperty('cxf_operation').getLocalPart() == 'consultarClasificacionSoftwares'"
				evaluator="groovy">
				<processor-chain doc:name="Processor Chain">
				
				<set-session-variable variableName="codigoGrupo"
						value="#[payload]" doc:name="Session Variable" />
						
					<db:select config-ref="MySQL_Configuration" doc:name="Database">
						<db:parameterized-query><![CDATA[select c_categoria, count(c_categoria) numero from(
						select sf.k_codigo,sf.c_categoria from software sf, 
						software_autor sfa
						where sf.k_codigo=sfa.i_cod_software
						and sfa.i_cod_grupo_investigacion=#[codigoGrupo]
						group by sf.k_codigo) as secreto_emp_grupo
						group by c_categoria]]></db:parameterized-query>
					</db:select>
				<json:object-to-json-transformer
						doc:name="Object to JSON" />
					<logger message="#[payload]" level="INFO" doc:name="Logger" />
				</processor-chain>
			</when>
            <when evaluator="groovy"  expression="message.getInvocationProperty('cxf_operation').getLocalPart() == 'consultarSoftwares'">
	                <processor-chain doc:name="Processor Chain">
	                    <db:select config-ref="MySQL_Configuration" doc:name="Database">
	                        <db:parameterized-query><![CDATA[select * from software]]></db:parameterized-query>
	                    </db:select>
	                <json:object-to-json-transformer
						doc:name="Object to JSON" />
					<logger message="#[payload]" level="INFO" doc:name="Logger" />
					<scripting:component doc:name="Groovy">
						<scripting:script engine="Groovy"><![CDATA[co.com.ic2.transformers.TransformerSoftware.getSoftwares(payload)]]></scripting:script>
					</scripting:component>
					<logger message="#[payload]" level="INFO" doc:name="Logger" />
				</processor-chain>
			</when>
			<when evaluator="groovy"
				expression="message.getInvocationProperty('cxf_operation').getLocalPart() == 'consultarSoftwaresGrupo'">
				<processor-chain doc:name="Processor Chain">

					<set-session-variable variableName="codigoGrupo"
						value="#[payload]" doc:name="Session Variable" />

					<db:select config-ref="MySQL_Configuration" doc:name="Database">
						<db:parameterized-query><![CDATA[select * from software s,software_autor sa where s.k_codigo=sa.i_cod_software and sa.i_cod_grupo_investigacion=#[codigoGrupo]]]></db:parameterized-query>
					</db:select>

					<json:object-to-json-transformer
						doc:name="Object to JSON" />
					<logger message="#[payload]" level="INFO" doc:name="Logger" />
					<scripting:component doc:name="Groovy">
						<scripting:script engine="Groovy"><![CDATA[co.com.ic2.transformers.TransformerSoftware.getSoftwares(payload)]]></scripting:script>
					</scripting:component>
					<logger message="#[payload]" level="INFO" doc:name="Logger" />
				</processor-chain>
			</when>
            <when evaluator="groovy"  expression="message.getInvocationProperty('cxf_operation').getLocalPart() == 'insertarSoftware'">
	                <processor-chain doc:name="Processor Chain">
	                <set-session-variable variableName="codigo" value="#[payload[0]]" doc:name="Session Variable"/>
	                <set-session-variable variableName="titulo" value="#[payload[1]]" doc:name="Session Variable"/>
	                <set-session-variable variableName="numeroRegistroDerechosAutor" value="#[payload[2]]" doc:name="Session Variable"/>
	                <set-session-variable variableName="ano" value="#[payload[3]]" doc:name="Session Variable"/>
	                <set-session-variable variableName="descripcion" value="#[payload[4]]" doc:name="Session Variable"/>
	                <set-session-variable variableName="codProyectoColciencias" value="#[payload[5]]" doc:name="Session Variable"/>
	                <set-session-variable variableName="certificacion" value="#[payload[6]]" doc:name="Session Variable"/>
	               	<set-session-variable variableName="categoria" value="#[payload[7]]" doc:name="Session Variable"/>
	                <set-session-variable variableName="clasificado" value="#[payload[8]]" doc:name="Session Variable"/>
	                    <db:insert config-ref="MySQL_Configuration" doc:name="Database">
	                        <db:parameterized-query><![CDATA[insert into software (k_codigo,n_titulo,c_num_reg_derechos_autor,i_ano,n_descripcion,
	                        c_cod_proy_colciencias,b_certificacion,c_categoria,b_clasificado) values(#[codigo],#[titulo],#[numeroRegistroDerechosAutor],#[ano],
	                        #[descripcion],#[codProyectoColciencias],#[certificacion],#[categoria],#[clasificado])]]></db:parameterized-query>
	                    </db:insert>
	                </processor-chain>
            </when>
            <when evaluator="groovy"  expression="message.getInvocationProperty('cxf_operation').getLocalPart() == 'insertarSoftwares'">
	                <processor-chain doc:name="Processor Chain">
	                <set-session-variable variableName="codigoGrupo" value="#[payload[0]]" doc:name="Session Variable"/>
	                <set-session-variable variableName="softwares" value="#[payload[1]]" doc:name="Session Variable"/>
	                
	                <foreach collection="softwares" doc:name="For Each"
						counterVariableName="i" rootMessageVariableName="software">
						<set-variable variableName="software"
							value="#[softwares[i-1]]" doc:name="Session Variable" />

						<logger message="#[softwares[i-1].nombre]" level="INFO"
							doc:name="Logger" />

						<db:insert config-ref="MySQL_Configuration"
							autoGeneratedKeys="true" autoGeneratedKeysColumnIndexes="1"
							doc:name="Database">
							<db:parameterized-query><![CDATA[insert into software (n_titulo,c_num_reg_derechos_autor,i_ano,n_descripcion,c_cod_proy_colciencias,b_certificacion,
	                        c_categoria,b_clasificado) values(#[software.nombre],#[software.registroDerechosAutor],#[software.ano],#[software.descripcion],#[software.codigoProyectoColciencias],#[software.certificacion],#[software.categoria],#[software.clasificado])]]></db:parameterized-query>
						</db:insert>
						<logger message="#[payload]" level="INFO" doc:name="Logger" />
						<set-variable variableName="codigoSoftware"
							value="#[payload[0].GENERATED_KEY]" doc:name="Variable" />
						<logger message="Codigo software generado #[codigoSoftware]"
							level="INFO" doc:name="Logger" />
	                
	                
	                
		                <set-variable variableName="autores" value="#[software.autores]"
								doc:name="Variable" />
	
							<foreach collection="autores" doc:name="For Each"
								counterVariableName="j" rootMessageVariableName="autor">
								<set-variable variableName="autor" value="#[autores[j-1]]"
									doc:name="Variable" />
	
								<logger message="#[autor.nombreCompleto]" level="INFO"
									doc:name="Logger" />
	
								<db:select config-ref="MySQL_Configuration" doc:name="Database">
									<db:parameterized-query><![CDATA[select k_codigo from investigador where n_nombre=#[autor.nombreCompleto]]]></db:parameterized-query>
								</db:select>
	
								<logger message="#[payload]" level="INFO" doc:name="Logger" />
	
								<choice doc:name="Choice">
									<when expression="#[payload.size() ==0]">
										<logger message="no existe investigador" level="INFO"
											doc:name="Logger" />
										<db:insert config-ref="MySQL_Configuration"
											autoGeneratedKeys="true" autoGeneratedKeysColumnIndexes="1"
											doc:name="Database">
											<db:parameterized-query><![CDATA[insert into investigador (n_nombre) values(#[autor.nombreCompleto])]]></db:parameterized-query>
										</db:insert>
	
										<set-variable variableName="idAutor"
											value="#[payload[0].GENERATED_KEY]" doc:name="Variable" />
									</when>
									<otherwise>
										<logger message="Investigador #[payload] ya existe"
											level="INFO" doc:name="Logger" />
	
										<set-variable variableName="idAutor"
											value="#[payload[0].k_codigo]" doc:name="Variable" />
									</otherwise>
								</choice>
	
								<logger message="#[idAutor]" level="INFO" doc:name="Logger" />
	
								<db:insert config-ref="MySQL_Configuration"
									autoGeneratedKeys="true" autoGeneratedKeysColumnIndexes="1"
									doc:name="Database">
									<db:parameterized-query><![CDATA[insert into software_autor (i_cod_software,i_cod_investigador,i_cod_grupo_investigacion,i_integrante_grupo,i_grupos_colaboracion) values(#[codigoSoftware],#[idAutor],#[codigoGrupo],#[autor.integranteGrupo],#[autor.gruposColaboracion])]]></db:parameterized-query>
								</db:insert>
							</foreach>
	                </foreach>
	                <mulexml:object-to-xml-transformer doc:name="Object to XML"/>
					</processor-chain>
            </when>
        </choice>
    </flow>
</mule>
