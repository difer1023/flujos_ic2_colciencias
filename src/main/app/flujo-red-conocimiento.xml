<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd 
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">

	<flow name="flujo-red-conocimiento">
		<http:listener config-ref="HTTP_colciencias_Configuration"
			path="/flujoRedConocimiento" doc:name="HTTP" />
		<cxf:jaxws-service doc:name="flujoRedConocimiento"
			service="redConocimientoService" serviceClass="co.com.ic2.colciencias.ws.IServiceRedConocimiento" />
		<choice doc:name="Choice">
			<when
				expression="message.getInvocationProperty('cxf_operation').getLocalPart() == 'consultarClasificacionRedesConocimiento'"
				evaluator="groovy">
				<processor-chain doc:name="Processor Chain">
				
				<set-session-variable variableName="codigoGrupo"
						value="#[payload]" doc:name="Session Variable" />
						
					<db:select config-ref="MySQL_Configuration" doc:name="Database">
						<db:parameterized-query><![CDATA[select c_categoria, count(c_categoria) numero from
						red_conocimiento
						where i_cod_grupo_investigacion=#[codigoGrupo]
						group by c_categoria]]></db:parameterized-query>
					</db:select>
				<json:object-to-json-transformer
						doc:name="Object to JSON" />
					<logger message="#[payload]" level="INFO" doc:name="Logger" />
				</processor-chain>
			</when>
			<when evaluator="groovy"
				expression="message.getInvocationProperty('cxf_operation').getLocalPart() == 'consultarRedesConocimiento'">
				<processor-chain doc:name="Processor Chain">
					<db:select config-ref="MySQL_Configuration" doc:name="Database">
						<db:parameterized-query><![CDATA[select * from red_conocimiento]]></db:parameterized-query>
					</db:select>
					<json:object-to-json-transformer
						doc:name="Object to JSON" />
					<logger message="#[payload]" level="INFO" doc:name="Logger" />
					<scripting:component doc:name="Groovy">
						<scripting:script engine="Groovy"><![CDATA[co.com.ic2.transformers.TransformerRedConocimiento.getRedesConocimiento(payload)]]></scripting:script>
					</scripting:component>
					<logger message="#[payload]" level="INFO" doc:name="Logger" />
				</processor-chain>
			</when>
			<when evaluator="groovy"
				expression="message.getInvocationProperty('cxf_operation').getLocalPart() == 'consultarRedesConocimientoGrupo'">
				<processor-chain doc:name="Processor Chain">

					<set-session-variable variableName="codigoGrupo"
						value="#[payload]" doc:name="Session Variable" />

					<db:select config-ref="MySQL_Configuration" doc:name="Database">
						<db:parameterized-query><![CDATA[select * from red_conocimiento where i_cod_grupo_investigacion=#[codigoGrupo]]]></db:parameterized-query>
					</db:select>

					<json:object-to-json-transformer
						doc:name="Object to JSON" />
					<logger message="#[payload]" level="INFO" doc:name="Logger" />
					<scripting:component doc:name="Groovy">
						<scripting:script engine="Groovy"><![CDATA[co.com.ic2.transformers.TransformerRedConocimiento.getRedesConocimiento(payload)]]></scripting:script>
					</scripting:component>
					<logger message="#[payload]" level="INFO" doc:name="Logger" />
				</processor-chain>
			</when>
			<when evaluator="groovy"
				expression="message.getInvocationProperty('cxf_operation').getLocalPart() == 'insertarRedConocimiento'">
				<processor-chain doc:name="Processor Chain">
					<set-session-variable variableName="codigo"
						value="#[payload[0]]" doc:name="Session Variable" />
					<set-session-variable variableName="nombre"
						value="#[payload[1]]" doc:name="Session Variable" />
					<set-session-variable variableName="pais"
						value="#[payload[2]]" doc:name="Session Variable" />
					<set-session-variable variableName="fechaInicio"
						value="#[payload[3]]" doc:name="Session Variable" />
					<set-session-variable variableName="investigadorPrincipal"
						value="#[payload[4]]" doc:name="Session Variable" />
					<set-session-variable variableName="nombreComunidad"
						value="#[payload[5]]" doc:name="Session Variable" />
					<set-session-variable variableName="paginaWeb"
						value="#[payload[6]]" doc:name="Session Variable" />
					<set-session-variable variableName="liderRed"
						value="#[payload[7]]" doc:name="Session Variable" />
					<set-session-variable variableName="categoria"
						value="#[payload[8]]" doc:name="Session Variable" />
					<set-session-variable variableName="clasificado"
						value="#[payload[9]]" doc:name="Session Variable" />
					<set-session-variable variableName="codigoGrupoInvestigacion"
						value="#[payload[10]]" doc:name="Session Variable" />
					<db:insert config-ref="MySQL_Configuration" doc:name="Database">
						<db:parameterized-query><![CDATA[insert into red_conocimiento (k_codigo,n_nombre,i_pais,i_fecha_inicio,i_investigador_principal,
	                        n_nombre_comunidad,n_pag_web,b_lider_red,c_categoria,b_clasificado,i_cod_grupo_investigacion) values(#[codigo],#[nombre],#[pais],
	                        #[fechaInicio],#[investigadorPrincipal],#[nombreComunidad],#[paginaWeb],#[liderRed],#[categoria],#[clasificado],#[codigoGrupoInvestigacion]])]]></db:parameterized-query>
					</db:insert>
				</processor-chain>
			</when>
			<when evaluator="groovy"
				expression="message.getInvocationProperty('cxf_operation').getLocalPart() == 'insertarRedesConocimiento'">
				<processor-chain doc:name="Processor Chain">
					<set-session-variable variableName="codigoGrupo"
						value="#[payload[0]]" doc:name="Session Variable" />
					<set-session-variable variableName="redesConocimiento"
						value="#[payload[1]]" doc:name="Session Variable" />

					<foreach collection="redesConocimiento" doc:name="For Each"
						counterVariableName="i" rootMessageVariableName="redConocimiento">
						<set-variable variableName="redConocimiento"
							value="#[redesConocimiento[i-1]]" doc:name="Session Variable" />

						<logger message="#[redesConocimiento[i-1].nombre]" level="INFO"
							doc:name="Logger" />

						<db:insert config-ref="MySQL_Configuration"
							autoGeneratedKeys="true" autoGeneratedKeysColumnIndexes="1"
							doc:name="Database">
							<db:parameterized-query><![CDATA[insert into red_conocimiento(n_nombre,c_lugar,i_ano_inicio,n_nombre_comunidad,n_pag_web,b_lider_red,c_categoria,b_clasificado,i_cod_grupo_investigacion) 
								values(#[redConocimiento.nombre],#[redConocimiento.lugar],#[redConocimiento.ano],#[redConocimiento.nombreComunidad],#[redConocimiento.pagWeb],#[redConocimiento.liderRed],#[redConocimiento.categoria],#[redConocimiento.clasificado],#[codigoGrupo])]]></db:parameterized-query>
						</db:insert>
						<logger message="#[payload]" level="INFO" doc:name="Logger" />
						<set-variable variableName="codigoRedConocimiento"
							value="#[payload[0].GENERATED_KEY]" doc:name="Variable" />
						<logger message="Codigo red conocimineto generado #[codigoRedConocimiento]"
							level="INFO" doc:name="Logger" />

						<choice doc:name="Choice">
							<when expression="#[redesConocimiento[i-1].instituciones != empty]">
								<set-variable variableName="instituciones"
									value="#[redesConocimiento[i-1].instituciones]" doc:name="Variable" />

								<foreach collection="instituciones" doc:name="For Each"
									counterVariableName="j" rootMessageVariableName="institucion">
									<set-variable variableName="institucion" value="#[instituciones[j-1]]"
										doc:name="Variable" />

									<logger message="#[institucion.nombre]" level="INFO"
										doc:name="Logger" />

									<db:select config-ref="MySQL_Configuration" doc:name="Database">
										<db:parameterized-query><![CDATA[select k_codigo from entidad where n_nombre=#[institucion.nombre]]]></db:parameterized-query>
									</db:select>

									<logger message="#[payload]" level="INFO" doc:name="Logger" />

									<choice doc:name="Choice">
										<when expression="#[payload.size() ==0]">
											<logger message="no existe investigador" level="INFO"
												doc:name="Logger" />
											<db:insert config-ref="MySQL_Configuration"
												autoGeneratedKeys="true" autoGeneratedKeysColumnIndexes="1"
												doc:name="Database">
												<db:parameterized-query><![CDATA[insert into entidad (n_nombre,b_institucion) values(#[institucion.nombre],1)]]></db:parameterized-query>
											</db:insert>

											<set-variable variableName="idEntidad"
												value="#[payload[0].GENERATED_KEY]" doc:name="Variable" />
										</when>
										<otherwise>
											<logger message="Investigador #[payload] ya existe"
												level="INFO" doc:name="Logger" />

											<set-variable variableName="idEntidad"
												value="#[payload[0].k_codigo]" doc:name="Variable" />
										</otherwise>
									</choice>

									<logger message="#[idEntidad]" level="INFO" doc:name="Logger" />

									<db:insert config-ref="MySQL_Configuration"
										autoGeneratedKeys="true" autoGeneratedKeysColumnIndexes="1"
										doc:name="Database">
										<db:parameterized-query><![CDATA[insert into red_conocimiento_entidad (i_cod_red_conocimiento,i_cod_entidad) values(#[codigoRedConocimiento],#[idEntidad])]]></db:parameterized-query>
									</db:insert>
								</foreach>
							</when>
							<otherwise>
								<logger message="Institucion nula" level="INFO" doc:name="Logger" />
							</otherwise>
						</choice>
					</foreach>
					<mulexml:object-to-xml-transformer
						doc:name="Object to XML" />

				</processor-chain>
			</when>
		</choice>
	</flow>
</mule>
